<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cardproject.myapp.dao">

	<!-- test : 모든 경매물품 조회 <select id="selectAllItems" resultType="itemvo"> 
		select * from items </select> -->
	<!-- 포켓몬 물품 검색 -->
	<select id="selectItemForName" parameterType="Map" resultType="itemdetailvo">
		SELECT *
	    FROM (
	        SELECT
	            i.item_id,
	            i.user_id,
	            i.item_name,
	            i.cmt,
	            i.status,
	            i.min_price,
	            i.rarity,
	            TO_CHAR(i.create_date, 'yyyy-mm-dd hh24:mi:ss') create_date,
	            TO_CHAR(i.end_date, 'yyyy-mm-dd hh24:mi:ss') end_date,
	            i.trade_type,
	            i.cat,
	            i.image1,
	            i.image2,
	            i.image3,
	            i.image4,
	            i.image5,
	            u.nickname,
	            u.user_tier,
	            p.card_id,
	            p.card_name,
	            p.card_image,
	            COALESCE(b.bid_count, 0) AS bid_count,
	            ROW_NUMBER() OVER (
	                ORDER BY
	                <choose>
						<when test="sortOption == 'recent'">
							i.create_date DESC
						</when>
						<when test="sortOption == 'ending'">
							i.end_date
						</when>
						<when test="sortOption == 'mostpeople'">
							b.bid_count DESC
						</when>
						<when test="sortOption == 'leastpeople'">
							b.bid_count
						</when>
						<otherwise>i.create_date DESC</otherwise>
					</choose>
	            ) AS ROWNUMBER
	        FROM
	            items i
	        JOIN
	            users u ON u.user_id = i.user_id
	        LEFT JOIN (
	            SELECT item_id, COUNT(*) AS bid_count
	            FROM biddings
	            GROUP BY item_id
	        ) b ON i.item_id = b.item_id
	        LEFT JOIN pokemon p ON i.p_card_id = p.card_id
	        WHERE i.end_date > SYSDATE AND  i.item_name LIKE '%' || #{keyword} || '%'
	    ) subquery
	    WHERE ROWNUMBER BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
	</select>
	<!-- P경매물품 조회 -->
	<select id="selectItemRecent" parameterType="map" resultType="itemdetailvo">
		SELECT *
	    FROM (
	        SELECT
	            i.item_id,
	            i.user_id,
	            i.item_name,
	            i.cmt,
	            i.status,
	            i.min_price,
	            i.rarity,
	            TO_CHAR(i.create_date, 'yyyy-mm-dd hh24:mi:ss') create_date,
	            TO_CHAR(i.end_date, 'yyyy-mm-dd hh24:mi:ss') end_date,
	            i.trade_type,
	            i.cat,
	            i.image1,
	            i.image2,
	            i.image3,
	            i.image4,
	            i.image5,
	            u.nickname,
	            u.user_tier,
	            p.card_id,
	            p.card_name,
	            p.card_image,
	            COALESCE(b.bid_count, 0) AS bid_count,
	            ROW_NUMBER() OVER (
	                ORDER BY
	                <choose>
						<when test="sortOption == 'recent'">
							i.create_date DESC
						</when>
						<when test="sortOption == 'ending'">
							i.end_date
						</when>
						<when test="sortOption == 'mostpeople'">
							b.bid_count DESC
						</when>
						<when test="sortOption == 'leastpeople'">
							b.bid_count
						</when>
						<otherwise>i.create_date DESC</otherwise>
					</choose>
	            ) AS ROWNUMBER
	        FROM
	            items i
	        JOIN
	            users u ON u.user_id = i.user_id
	        LEFT JOIN (
	            SELECT item_id, COUNT(*) AS bid_count
	            FROM biddings
	            GROUP BY item_id
	        ) b ON i.item_id = b.item_id
	        LEFT JOIN pokemon p ON i.p_card_id = p.card_id
	        WHERE i.end_date > SYSDATE
	    ) subquery
	    WHERE ROWNUMBER BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
	</select>
	<!-- 총 게시글 수 -->
	<select id="getTotalItemCount" resultType="int">
		SELECT COUNT(*) FROM items WHERE end_date > SYSDATE
	</select>
	<!-- 검색했을 때 게시글 수 -->
	<select id="getTotalItemCountByKeyword" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM items WHERE item_name LIKE '%' || #{keyword} || '%' AND end_date > SYSDATE AND cat=0
	</select>
	<!-- 경매물품 하나 detail 조회 -->
	<select id="selectItemOne" parameterType="int"
		resultType="itemdetailvo">
		SELECT i.item_id, i.user_id, i.item_name, i.cmt, i.status,
		i.min_price,
		i.rarity, TO_CHAR(i.create_date, 'yyyy-mm-dd hh24:mi:ss') create_date,
		TO_CHAR(i.end_date, 'yyyy-mm-dd hh24:mi:ss') end_date,
		i.trade_type, i.cat, i.image1, i.image2, i.image3, i.image4, i.image5,
		u.nickname, u.user_tier, p.card_id, p.card_name, p.card_image,
		COALESCE(b.bid_count, 0) AS bid_count
		FROM items i
		JOIN users u ON u.user_id = i.user_id
		LEFT JOIN (
		SELECT item_id, COUNT(*) AS bid_count
		FROM biddings
		GROUP BY item_id
		) b ON i.item_id = b.item_id
		LEFT JOIN pokemon p ON
		i.p_card_id = p.card_id
		WHERE i.item_id = #{item_id}

	</select>

	<!-- 경매물품등록 (items테이블에 Insert) -->
	<insert id="itemInsert" parameterType="itemvo">
		insert into items(item_id, user_id, item_name, cmt, status, min_price,
		rarity, end_date, cat, image1, image2, image3, image4,
		image5, d_card_id, p_card_id, y_card_id, s_card_id, o_card_id)
		values (SEQ_ITEMS.NEXTVAL, #{user_id}, #{item_name}, #{cmt}, #{status},
		#{min_price}, #{rarity}, to_date(#{end_date}, 'YYYY-MM-DD
		HH24:MI:SS'), #{cat}, #{image1}, #{image2}, #{image3},
		#{image4}, #{image5}, #{d_card_id}, #{p_card_id}, #{y_card_id},
		#{s_card_id}, #{o_card_id})
	</insert>
	<!-- 관심물품 등록 (likes테이블에 Insert) -->
	<insert id="likeInsert" parameterType="likevo">
		insert into likes(user_id,item_id)
		values (#{user_id},#{item_id})
	</insert>
	<!-- 관심물품 삭제 (likes테이블에서 delete) -->
	<delete id="likeDelete" parameterType="map">
		delete from likes where
		user_id=#{user_id} and item_id=#{item_id}
	</delete>
	<!-- 관심물품 상태 확인 -->
	<select id="likeStatus" parameterType="map" resultType="likevo">
		select * from likes where user_id=#{user_id} and item_id=#{item_id}
	</select>
	
	<!-- 입찰 (biddings테이블에 Insert) -->
	<insert id="biddingInsert" parameterType="biddingvo">
		insert into biddings(bid_id,price,user_id,item_id) 
		values(BID_SEQ.NEXTVAL, #{price},#{user_id},#{item_id})
	</insert>
	<!-- 사용자가 동일 물품에 입찰하는지 확인용 -->
	<select id="userBidsForItem" parameterType="map" resultType="biddingvo">
		SELECT *
		FROM biddings 
		WHERE user_id = #{user_id} AND item_id = #{item_id}
	</select>
	<!-- 자신의 물품에 입찰하는지 확인용 -->
	<select id="sellerBidsForItem" parameterType="map" resultType="itemvo">
		select * from items where user_id = #{user_id} and item_id = #{item_id}
	</select>
	<!-- 낙찰(시간확인) -->
	<select id="selectExpiredItem" resultType="itemvo">
		select * from items where end_date <![CDATA[<]]> sysdate
	</select>
	<!-- 물품에 해당하는 입찰 조회 -->
	<select id="selectBid" parameterType="int" resultType="biddingvo">
		select * from biddings where item_id = #{item_id} and is_win=0
	</select>
	<!-- 물품에 해당하는 입찰이 낙찰상태인지 조회 -->
	<select id="bidVerification" parameterType="int" resultType="biddingvo">
		select * from biddings where item_id = #{item_id} and is_win = 1
	</select>
	<!-- 낙찰되지않은 경매중 마감된 items 조회(낙찰할 것만/입찰금이 같으면 더 빨리 입찰한 걸로 조회) -->
	<select id="selectExpired"  resultType="itemexpiredvo">
		SELECT *
 		FROM
		(SELECT i.item_id,
        i.user_id as seller_id,
        i.item_name,
        i.end_date,
        b.bid_id,
        b.price,
        b.bid_time,
        b.user_id as customer_id,
        b.is_win,
        ROW_NUMBER() OVER ( PARTITION BY b.ITEM_ID ORDER BY b.PRICE DESC, b.BID_TIME) AS RNK
		FROM items i
		JOIN biddings b ON i.item_id = b.item_id
		JOIN (
		    SELECT item_id, MAX(price) AS price
		    FROM biddings
		    WHERE is_win = 0
		    GROUP BY item_id
		) mb ON b.item_id = mb.item_id AND b.price = mb.price
		WHERE i.end_date <![CDATA[<]]> SYSDATE
		AND b.is_win = 0)
		WHERE RNK = 1
	</select>
	
	<select id="getExpiredIsWin0" resultType="itemexpiredvo">
		SELECT i.item_id,
        i.user_id as seller_id,
        i.item_name,
        i.end_date,
        b.bid_id,
        b.price,
        b.bid_time,
        b.user_id as customer_id,
        b.is_win
		FROM items i
		JOIN biddings b ON i.item_id = b.item_id
		WHERE i.end_date <![CDATA[<]]> SYSDATE
		AND b.is_win = 0
	</select>
	
	<update id="biddingUpdate1" parameterType="int">
		UPDATE biddings 
		SET is_win = 1 
		WHERE item_id = #{item_id} 
		AND price = (
		    SELECT MAX(price) 
		    FROM biddings 
		    WHERE item_id = #{item_id}
		)
	</update>
	<!-- 입찰중 낙찰된 것들 is_win 1로 update -->
	<update id="updateIsWin1" parameterType="java.util.List">
        UPDATE biddings 
        SET IS_WIN = '1' 
        WHERE BID_ID IN 
        <foreach item="bidIdArr" collection="list" open="(" close=")" separator=",">
            #{bidIdArr}
        </foreach>
    </update>
    
	<!-- 유찰된 biddings 2로 update -->
	<update id="biddingUpdate2" parameterType="int">
		UPDATE biddings
		SET IS_WIN = 2
		WHERE BID_ID IN
		<foreach item="isWin0BidIdArr" collection="list" open="(" close=")" separator=",">
            #{isWin0BidIdArr}
        </foreach>
	</update>
	<!-- 낙찰금만 뽑는 Bid -->
	<select id="secondPrice" resultType="biddingvo">
		
		SELECT BID_ID, PRICE, USER_ID, ITEM_ID, BID_TIME, IS_WIN
		 FROM (
		SELECT b.*,
		DENSE_RANK() OVER ( PARTITION BY b.ITEM_ID ORDER BY b.PRICE DESC) AS RNK
		FROM biddings b
		WHERE IS_WIN != 0
		ORDER BY ITEM_ID , PRICE DESC) 
		WHERE RNK = 2
		UNION
		SELECT *
		  FROM biddings
		  WHERE IS_WIN = 1
		      AND ITEM_ID NOT IN (SELECT ITEM_ID FROM biddings WHERE IS_WIN = 2 GROUP BY ITEM_ID)
	</select>
	<!-- 낙찰insert -->
	<insert id="tradeInsert" parameterType="tradevo">
		insert into trades(trade_id,user_id,item_id,price,trade_type,is_recommend,stage,is_success)
		values (TRADE_SEQ.NEXTVAL, #{user_id},#{item_id},#{price},#{trade_type},#{is_recommend},#{stage},#{is_success})
	</insert>
	<!-- 거래내역에 item_id를 가진 낙찰이 있는지 확인 -->
	<select id="isTradeExist" parameterType="int" resultType="tradevo">
		select * from trades where item_id=#{item_id}
	</select>
	<!-- 입찰 금액 수정 -->
	<update id="biddingPriceUpdate" parameterType="map">
		UPDATE biddings
		SET price = #{price}
		WHERE user_id=#{user_id} AND item_id=#{item_id}
	</update>
	<!-- 현재 자신의 입찰가 불러오기 -->
	<select id="myBidPrice" parameterType="map" resultType="Integer">
		select price from biddings where user_id=#{user_id} AND item_id=#{item_id}
	</select>
	<!-- 포켓몬카드 불러오기 -->
	<select id="selectPCard" resultType="pokemonvo">
		select * from pokemon
	</select>
	<select id="selectPRight" parameterType="String" resultType="pokemonvo">
		SELECT * FROM pokemon
        WHERE card_name LIKE '%' || #{cardKeyword} || '%'
	</select>
	<!-- 원피스카드 불러오기 -->
	<select id="selectOCard" resultType="onepiecevo">
		select * from onepiece
	</select>
	<!-- 디지몬카드 불러오기 -->
	<select id="selectDCard" resultType="digimonvo">
		select * from digimon
	</select>
	<!-- 유희왕카드 불러오기 -->
	<select id="selectYCard" resultType="yugiohvo">
		select * from yugioh
	</select>
	<!-- 스포츠카드 불러오기 -->
	<select id="selectSCard" resultType="sportvo">
		select * from sports
	</select>
	





</mapper>

